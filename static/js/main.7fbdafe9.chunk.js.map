{"version":3,"sources":["Formulario/Formulario.jsx","Citas/Citas.jsx","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","dueño","fecha","hora","sintomas","cita","setCita","error","setError","handleChange","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","prototype","ProtoTypes","func","isRequired","Citas","eliminarCita","onClick","object","App","citasIniciales","JSON","parse","localStorage","getItem","citas","setCitas","useEffect","setItem","stringify","delet","filter","mensaje","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7fbdafe9.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport ProtoTypes from \"prop-types\";\r\n\r\nconst Formulario = ({ crearCita }) => {\r\n  // Crear State de Citas:\r\n  const [cita, setCita] = useState({\r\n    mascota: \"\",\r\n    dueño: \"\",\r\n    fecha: \"\",\r\n    hora: \"\",\r\n    sintomas: \"\",\r\n  });\r\n\r\n  // Crear State para errores de validación:\r\n  const [error, setError] = useState(false);\r\n\r\n  // Funcion que se ejecuta cada que se escribe en un input:\r\n  const handleChange = (e) => {\r\n    setCita({ ...cita, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  // Extraer los valores:\r\n  const { mascota, dueño, fecha, hora, sintomas } = cita;\r\n\r\n  // Cuando el usuario preciona agregar cita:\r\n  const sumitCita = (e) => {\r\n    e.preventDefault();\r\n\r\n    // Validar:\r\n    if (\r\n      mascota.trim() === \"\" ||\r\n      dueño.trim() === \"\" ||\r\n      fecha.trim() === \"\" ||\r\n      hora.trim() === \"\" ||\r\n      sintomas.trim() === \"\"\r\n    ) {\r\n      setError(true);\r\n      return;\r\n    }\r\n\r\n    // Eliminar el mensaje previo:\r\n    setError(false);\r\n\r\n    // Asignar un ID:\r\n    cita.id = uuidv4();\r\n\r\n    // Crear la cita:\r\n    crearCita(cita);\r\n\r\n    // Reiniciar:\r\n    setCita({\r\n      mascota: \"\",\r\n      dueño: \"\",\r\n      fecha: \"\",\r\n      hora: \"\",\r\n      sintomas: \"\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Fragment>\r\n      <h2> Crear cita </h2>\r\n      {error ? (\r\n        <p className=\"alerta-error\"> Todos los campos son obligatorios </p>\r\n      ) : null}\r\n      <form onSubmit={sumitCita}>\r\n        <label> Nombre mascota: </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"mascota\"\r\n          placeholder=\"Nombre mascota\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={mascota}\r\n        />\r\n\r\n        <label> Nombre dueño: </label>\r\n        <input\r\n          type=\"text\"\r\n          name=\"dueño\"\r\n          placeholder=\"Nombre dueño\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={dueño}\r\n        />\r\n\r\n        <label> Fecha: </label>\r\n        <input\r\n          type=\"date\"\r\n          name=\"fecha\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={fecha}\r\n        />\r\n\r\n        <label> Hora: </label>\r\n        <input\r\n          type=\"time\"\r\n          name=\"hora\"\r\n          className=\"u-full-width\"\r\n          onChange={handleChange}\r\n          value={hora}\r\n        />\r\n\r\n        <label> Síntomas: </label>\r\n        <textarea\r\n          className=\"u-full-width\"\r\n          name=\"sintomas\"\r\n          onChange={handleChange}\r\n          value={sintomas}\r\n        ></textarea>\r\n\r\n        <button className=\"u-full-width button-primary\" type=\"submit\">\r\n          Agregar cita\r\n        </button>\r\n      </form>\r\n    </Fragment>\r\n  );\r\n};\r\n\r\nFormulario.prototype = {\r\n  crearCita: ProtoTypes.func.isRequired,\r\n};\r\n\r\nexport default Formulario;\r\n","import React from \"react\";\r\nimport ProtoTypes from \"prop-types\";\r\n\r\nconst Citas = ({ cita, eliminarCita }) => {\r\n  const { mascota, dueño, fecha, hora, sintomas, id } = cita;\r\n\r\n  return (\r\n    <div className=\"cita\">\r\n      <p>\r\n        mascota: <span> {mascota}</span>\r\n      </p>\r\n      <p>\r\n        dueño: <span> {dueño}</span>\r\n      </p>\r\n      <p>\r\n        fecha: <span> {fecha}</span>\r\n      </p>\r\n      <p>\r\n        hora: <span> {hora}</span>\r\n      </p>\r\n      <p>\r\n        sintomas: <span> {sintomas}</span>\r\n      </p>\r\n\r\n      <button\r\n        className=\"button eliminar u-full-width\"\r\n        onClick={() => eliminarCita(id)}\r\n      >\r\n        Eliminar &times;\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nCitas.prototype = {\r\n  cita: ProtoTypes.object.isRequired,\r\n  eliminarCita: ProtoTypes.func.isRequired,\r\n};\r\n\r\nexport default Citas;\r\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Formulario from \"./Formulario/Formulario.jsx\";\nimport Citas from \"./Citas/Citas.jsx\";\n\nfunction App() {\n  // Citas en LocalStorage:\n  let citasIniciales = JSON.parse(localStorage.getItem(\"Citas\"));\n  if (!citasIniciales) {\n    citasIniciales = [];\n  }\n\n  // Crear State para almacenar las citas:\n  const [citas, setCitas] = useState(citasIniciales);\n\n  // UseEffect para verificar cuando un state cambia:\n  useEffect(() => {\n    if (citasIniciales) {\n      localStorage.setItem(\"Citas\", JSON.stringify(citas));\n    } else {\n      localStorage.setItem(\"Citas\", JSON.stringify([]));\n    }\n  }, [citas, citasIniciales]);\n\n  // Función para crear cita:\n  const crearCita = (cita) => {\n    setCitas([...citas, cita]);\n  };\n\n  // Funcion para eliminar cita:\n  const eliminarCita = (id) => {\n    const delet = citas.filter((cita) => {\n      return cita.id !== id;\n    });\n    setCitas(delet);\n  };\n\n  // Mensaje opcional:\n  const mensaje = citas.length === 0 ? \"No hay citas\" : \"Administra tu cita\";\n\n  return (\n    <Fragment>\n      <h1> Administrador de pacientes: </h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario crearCita={crearCita} />\n          </div>\n          <div className=\"one-half column\">\n            <h2> {mensaje} </h2>\n            {citas.map((cita) => {\n              return (\n                <Citas key={cita.id} cita={cita} eliminarCita={eliminarCita} />\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}